{"ast":null,"code":"import _objectSpread from \"/Users/emiliamena/Documents/coding/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/emiliamena/Documents/coding/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/emiliamena/Documents/coding/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _createSuper from \"/Users/emiliamena/Documents/coding/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _inherits from \"/Users/emiliamena/Documents/coding/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/emiliamena/Documents/coding/catch-of-the-day/src/components/App.js\";\nimport React from 'react';\nimport Header from './Header';\nimport Order from './Order';\nimport Inventory from './Inventory';\nimport sampleFishes from '../sample-fishes';\nimport Fish from './Fish'; //import { object } from 'prop-types';\n\nimport base from '../base';\n\nvar App = /*#__PURE__*/function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      fishes: {},\n      order: {}\n    };\n\n    _this.addFish = function (fish) {\n      //console.log(\"adding a fish\")\n      //take copy of existing state\n      var fishes = _objectSpread({}, _this.state.fishes); //add new fish to fishes variable\n\n\n      fishes[\"fish\".concat(Date.now())] = fish; //set new fishes object to state -pass it piece of state you want to update\n\n      _this.setState({\n        fishes: fishes\n      });\n    };\n\n    _this.updateFish = function (key, updatedFish) {\n      //copy of current state\n      var fishes = _objectSpread({}, _this.state.fishes); //update state\n\n\n      fishes[key] = updatedFish; //set to state\n\n      _this.setState({\n        fishes: fishes\n      });\n    };\n\n    _this.deleteFish = function (key) {\n      //copy of state\n      var fishes = _objectSpread({}, _this.state.fishes); //update state - removing - set fish we don't want to null\n\n\n      fishes[key] = null; //update state\n\n      _this.setState({\n        fishes\n      });\n    };\n\n    _this.loadSampleFishes = function () {\n      //alert('loading sample');\n      _this.setState({\n        fishes: sampleFishes\n      });\n    };\n\n    _this.addToOrder = function (key) {\n      //take copy of state\n      var order = _objectSpread({}, _this.state.order); //add to order or update number in order\n\n\n      order[key] = order[key] + 1 || 1; //setState to update state object\n\n      _this.setState({\n        order: order\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      //console.log('Mounted!');\n      var params = this.props.match.params; //first reinstate our localStorage\n\n      var localStorageRef = localStorage.getItem(params.storeId);\n\n      if (localStorage) {\n        //change back from string to object\n        this.setState({\n          order: JSON.parse(localStorageRef)\n        });\n      } //ref is for storename/fishes & syncing state with firebase\n\n\n      this.ref = base.syncState(\"\".concat(params.storeId, \"/fishes\"), {\n        context: this,\n        state: 'fishes'\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      localStorage.setItem(this.props.match.params.storeId, JSON.stringify(this.state.order));\n    } //unmounts store so you aren't still listening for changes\n\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      base.removeBinding(this.ref);\n    } //passing to inventory then to the form as prop\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"catch-of-the-day\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"menu\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Header, {\n        tagline: \"Fresh Seafood Market\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"fishes\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }\n      }, Object.keys(this.state.fishes).map(function (key) {\n        return /*#__PURE__*/React.createElement(Fish, {\n          key: key,\n          index: key,\n          details: _this2.state.fishes[key],\n          addToOrder: _this2.addToOrder,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 68\n          }\n        });\n      }))), /*#__PURE__*/React.createElement(Inventory, {\n        addFish: this.addFish,\n        updateFish: this.updateFish,\n        deleteFish: this.deleteFish,\n        loadSampleFishes: this.loadSampleFishes,\n        fishes: this.state.fishes,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/emiliamena/Documents/coding/catch-of-the-day/src/components/App.js"],"names":["React","Header","Order","Inventory","sampleFishes","Fish","base","App","state","fishes","order","addFish","fish","Date","now","setState","updateFish","key","updatedFish","deleteFish","loadSampleFishes","addToOrder","params","props","match","localStorageRef","localStorage","getItem","storeId","JSON","parse","ref","syncState","context","setItem","stringify","removeBinding","Object","keys","map","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,OAAOC,IAAP,MAAiB,QAAjB,C,CACA;;AACA,OAAOC,IAAP,MAAiB,SAAjB;;IAGMC,G;;;;;;;;;;;;;;;UAEFC,K,GAAQ;AACLC,MAAAA,MAAM,EAAE,EADH;AAELC,MAAAA,KAAK,EAAE;AAFF,K;;UA+BRC,O,GAAU,UAAAC,IAAI,EAAI;AACd;AACA;AACA,UAAMH,MAAM,qBAAO,MAAKD,KAAL,CAAWC,MAAlB,CAAZ,CAHc,CAId;;;AACAA,MAAAA,MAAM,eAAQI,IAAI,CAACC,GAAL,EAAR,EAAN,GAA8BF,IAA9B,CALc,CAMd;;AACA,YAAKG,QAAL,CAAc;AACVN,QAAAA,MAAM,EAAEA;AADE,OAAd;AAGH,K;;UAEDO,U,GAAa,UAACC,GAAD,EAAMC,WAAN,EAAsB;AAC/B;AACA,UAAMT,MAAM,qBAAO,MAAKD,KAAL,CAAWC,MAAlB,CAAZ,CAF+B,CAG/B;;;AACAA,MAAAA,MAAM,CAACQ,GAAD,CAAN,GAAcC,WAAd,CAJ+B,CAK/B;;AACA,YAAKH,QAAL,CAAc;AAACN,QAAAA,MAAM,EAAEA;AAAT,OAAd;AACH,K;;UAEDU,U,GAAa,UAACF,GAAD,EAAS;AAClB;AACA,UAAMR,MAAM,qBAAQ,MAAKD,KAAL,CAAWC,MAAnB,CAAZ,CAFkB,CAGlB;;;AACAA,MAAAA,MAAM,CAACQ,GAAD,CAAN,GAAc,IAAd,CAJkB,CAKlB;;AACA,YAAKF,QAAL,CAAc;AAAEN,QAAAA;AAAF,OAAd;AACH,K;;UAEDW,gB,GAAmB,YAAM;AACrB;AACA,YAAKL,QAAL,CAAc;AAAEN,QAAAA,MAAM,EAAEL;AAAV,OAAd;AACH,K;;UAEDiB,U,GAAa,UAACJ,GAAD,EAAS;AAClB;AACA,UAAMP,KAAK,qBAAO,MAAKF,KAAL,CAAWE,KAAlB,CAAX,CAFkB,CAGlB;;;AACAA,MAAAA,KAAK,CAACO,GAAD,CAAL,GAAaP,KAAK,CAACO,GAAD,CAAL,GAAa,CAAb,IAAkB,CAA/B,CAJkB,CAKlB;;AACA,YAAKF,QAAL,CAAc;AAACL,QAAAA,KAAK,EAAEA;AAAR,OAAd;AACH,K;;;;;;;wCApEmB;AAChB;AADgB,UAERY,MAFQ,GAEG,KAAKC,KAAL,CAAWC,KAFd,CAERF,MAFQ,EAGhB;;AACA,UAAMG,eAAe,GAAGC,YAAY,CAACC,OAAb,CAAqBL,MAAM,CAACM,OAA5B,CAAxB;;AACA,UAAGF,YAAH,EAAiB;AACb;AACA,aAAKX,QAAL,CAAc;AAAEL,UAAAA,KAAK,EAAEmB,IAAI,CAACC,KAAL,CAAWL,eAAX;AAAT,SAAd;AACH,OARe,CAShB;;;AACA,WAAKM,GAAL,GAAWzB,IAAI,CAAC0B,SAAL,WAAkBV,MAAM,CAACM,OAAzB,cAA2C;AAClDK,QAAAA,OAAO,EAAE,IADyC;AAElDzB,QAAAA,KAAK,EAAE;AAF2C,OAA3C,CAAX;AAIH;;;yCAEoB;AACjBkB,MAAAA,YAAY,CAACQ,OAAb,CAAqB,KAAKX,KAAL,CAAWC,KAAX,CAAiBF,MAAjB,CAAwBM,OAA7C,EAAsDC,IAAI,CAACM,SAAL,CAAe,KAAK3B,KAAL,CAAWE,KAA1B,CAAtD;AACH,K,CAED;;;;2CACuB;AACnBJ,MAAAA,IAAI,CAAC8B,aAAL,CAAmB,KAAKL,GAAxB;AACH,K,CAED;;;;6BA6CS;AAAA;;AACL,0BACI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,sBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,eAEI;AAAI,QAAA,SAAS,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKM,MAAM,CAACC,IAAP,CAAY,KAAK9B,KAAL,CAAWC,MAAvB,EAA+B8B,GAA/B,CAAmC,UAAAtB,GAAG;AAAA,4BAAI,oBAAC,IAAD;AAAM,UAAA,GAAG,EAAEA,GAAX;AAAgB,UAAA,KAAK,EAAEA,GAAvB;AAA4B,UAAA,OAAO,EAAE,MAAI,CAACT,KAAL,CAAWC,MAAX,CAAkBQ,GAAlB,CAArC;AAA6D,UAAA,UAAU,EAAE,MAAI,CAACI,UAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAJ;AAAA,OAAtC,CADL,CAFJ,CADJ,eAQI,oBAAC,SAAD;AAAW,QAAA,OAAO,EAAE,KAAKV,OAAzB;AAAkC,QAAA,UAAU,EAAE,KAAKK,UAAnD;AAA+D,QAAA,UAAU,EAAE,KAAKG,UAAhF;AAA4F,QAAA,gBAAgB,EAAE,KAAKC,gBAAnH;AAAqI,QAAA,MAAM,EAAE,KAAKZ,KAAL,CAAWC,MAAxJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARJ,CADJ;AAYH;;;;EA1FaT,KAAK,CAACwC,S;;AA6FxB,eAAejC,GAAf","sourcesContent":["import React from 'react';\nimport Header from './Header';\nimport Order from './Order';\nimport Inventory from './Inventory';\nimport sampleFishes from '../sample-fishes';\nimport Fish from './Fish';\n//import { object } from 'prop-types';\nimport base from '../base';\n\n\nclass App extends React.Component {\n    //initial state being set as property\n    state = {\n       fishes: {},\n       order: {}\n    };\n\n    componentDidMount() {\n        //console.log('Mounted!');\n        const { params } = this.props.match;\n        //first reinstate our localStorage\n        const localStorageRef = localStorage.getItem(params.storeId);\n        if(localStorage) {\n            //change back from string to object\n            this.setState({ order: JSON.parse(localStorageRef) })\n        }\n        //ref is for storename/fishes & syncing state with firebase\n        this.ref = base.syncState(`${params.storeId}/fishes`, {\n            context: this,\n            state: 'fishes'\n        });\n    }\n\n    componentDidUpdate() {\n        localStorage.setItem(this.props.match.params.storeId, JSON.stringify(this.state.order));\n    }\n\n    //unmounts store so you aren't still listening for changes\n    componentWillUnmount() {\n        base.removeBinding(this.ref);\n    }\n\n    //passing to inventory then to the form as prop\n    addFish = fish => {\n        //console.log(\"adding a fish\")\n        //take copy of existing state\n        const fishes = {...this.state.fishes};\n        //add new fish to fishes variable\n        fishes[`fish${Date.now()}`] = fish;\n        //set new fishes object to state -pass it piece of state you want to update\n        this.setState({\n            fishes: fishes\n        });\n    };\n\n    updateFish = (key, updatedFish) => {\n        //copy of current state\n        const fishes = {...this.state.fishes};\n        //update state\n        fishes[key] = updatedFish;\n        //set to state\n        this.setState({fishes: fishes}); \n    };\n\n    deleteFish = (key) => {\n        //copy of state\n        const fishes = { ...this.state.fishes };\n        //update state - removing - set fish we don't want to null\n        fishes[key] = null;\n        //update state\n        this.setState({ fishes });\n    };\n\n    loadSampleFishes = () => {\n        //alert('loading sample');\n        this.setState({ fishes: sampleFishes})\n    };\n\n    addToOrder = (key) => {\n        //take copy of state\n        const order = {...this.state.order};\n        //add to order or update number in order\n        order[key] = order[key] + 1 || 1;\n        //setState to update state object\n        this.setState({order: order});\n    }\n\n    render() {\n        return (\n            <div className=\"catch-of-the-day\">\n                <div className=\"menu\">\n                    <Header tagline=\"Fresh Seafood Market\" />\n                    <ul className=\"fishes\">\n                        {Object.keys(this.state.fishes).map(key => <Fish key={key} index={key} details={this.state.fishes[key]} addToOrder={this.addToOrder}/>)}\n                    </ul>\n                </div>\n                {/* <Order fishes={this.state.fishes} order={this.state.order} /> */}\n                <Inventory addFish={this.addFish} updateFish={this.updateFish} deleteFish={this.deleteFish} loadSampleFishes={this.loadSampleFishes} fishes={this.state.fishes}/>    \n            </div>\n        );\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}